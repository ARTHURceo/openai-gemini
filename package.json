#!/bin/bash

# 配置
LOG_DIR="/root/oci-start/logs"
MONITOR_LOG="${LOG_DIR}/system-monitor.log"
MEMORY_THRESHOLD=85  # 内存使用阈值(%)
CPU_THRESHOLD=95    # CPU使用阈值(%)
DISK_THRESHOLD=95   # 磁盘使用阈值(%)
JAVA_HEAP_MIN="128m"
JAVA_HEAP_MAX="256m"
OCI_START_JAR="oci-start-release.jar"

# 创建日志目录
mkdir -p $LOG_DIR

# 记录日志的函数
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> $MONITOR_LOG
}

# 获取内存使用率
get_memory_usage() {
    free | awk '/Mem:/ {print int($3/$2 * 100)}'
}

# 获取CPU使用率
get_cpu_usage() {
    top -bn1 | grep "Cpu(s)" | awk '{print int($2)}'
}

# 获取磁盘使用率
get_disk_usage() {
    df -h / | awk 'NR==2 {print int($5)}'
}

# 获取Java进程信息
get_java_pid() {
    pgrep -f $OCI_START_JAR
}

# 检查并处理系统资源
check_and_handle_resources() {
    local mem_usage=$(get_memory_usage)
    local cpu_usage=$(get_cpu_usage)
    local disk_usage=$(get_disk_usage)
    local java_pid=$(get_java_pid)
    local swap_usage=$(free | awk '/Swap:/ {if($2>0) print int($3/$2 * 100); else print 0}')
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | tr -d ' ')

    # 记录当前状态
    log_message "系统状态 - 内存: ${mem_usage}%, 交换: ${swap_usage}%, CPU: ${cpu_usage}%, 负载: ${load_avg}, 磁盘: ${disk_usage}%"

    # 如果Java进程不存在，启动服务
    if [ -z "$java_pid" ]; then
        log_message "OCI-Start服务未运行，正在重启..."
        cd /root/oci-start && ./oci-start.sh restart
        return
    fi

    # 内存使用过高时的处理
    if [ $mem_usage -gt $MEMORY_THRESHOLD ]; then
        log_message "警告：内存使用率过高 (${mem_usage}%)"
        
        # 清理系统缓存
        sync && echo 3 > /proc/sys/vm/drop_caches
        log_message "已清理系统缓存"

        # 如果内存仍然过高，重启Java进程
        if [ $(get_memory_usage) -gt $MEMORY_THRESHOLD ]; then
            log_message "重启OCI-Start服务以释放内存..."
            cd /root/oci-start && ./oci-start.sh restart
        fi
    fi

    # CPU使用过高时的处理
    if [ $cpu_usage -gt $CPU_THRESHOLD ]; then
        log_message "警告：CPU使用率过高 (${cpu_usage}%)"
        
        # 调整Java进程的优先级
        renice 10 $java_pid
        log_message "已调整Java进程优先级"
    fi

    # 磁盘空间处理
    if [ $disk_usage -gt $DISK_THRESHOLD ]; then
        log_message "警告：磁盘使用率过高 (${disk_usage}%)"
        
        # 清理旧日志
        find $LOG_DIR -name "*.log.*" -mtime +7 -exec rm {} \;
        log_message "已清理7天前的日志文件"
    fi
}

# 优化系统设置
optimize_system() {
    # 设置系统内存管理参数
    sysctl -w vm.swappiness=10
    sysctl -w vm.vfs_cache_pressure=50
    sysctl -w vm.dirty_background_ratio=5
    sysctl -w vm.dirty_ratio=10

    # 持久化系统设置
    cat > /etc/sysctl.d/99-memory-tuning.conf << EOF
vm.swappiness = 10
vm.vfs_cache_pressure = 50
vm.dirty_background_ratio = 5
vm.dirty_ratio = 10
EOF

    log_message "系统参数优化完成"

    # 生成一个随机分钟数 (0-59)
    RANDOM_MINUTE=$((RANDOM % 60))
    # 生成一个随机小时数 (0-11)
    RANDOM_HOUR=$((RANDOM % 12))

    # 更新内存管理定时任务
    if [ ! -f /etc/cron.d/memory-management ]; then
        cat > /etc/cron.d/memory-management << EEOF
# 每12小时执行一次系统维护（使用随机偏移）
${RANDOM_MINUTE} ${RANDOM_HOUR},$(((RANDOM_HOUR + 12) % 24)) * * * root sync && echo 3 > /proc/sys/vm/drop_caches && swapoff -a && swapon -a && echo "\$(date): 执行系统维护" >> ${LOG_DIR}/maintenance.log
EEOF
        log_message "已设置系统维护时间为每天 ${RANDOM_HOUR}:${RANDOM_MINUTE} 和 $((RANDOM_HOUR + 12)):${RANDOM_MINUTE}"
    fi
}

# 优化Java启动脚本
optimize_java_startup() {
    # 备份原始脚本
    cp /root/oci-start/oci-start.sh /root/oci-start/oci-start.sh.bak

    # 更新启动脚本
    cat > /root/oci-start/oci-start.sh << EOF
#!/bin/bash
cd \$(dirname \$0)

# JVM参数优化
JAVA_OPTS="-server \
    -Xms${JAVA_HEAP_MIN} \
    -Xmx${JAVA_HEAP_MAX} \
    -XX:+UseG1GC \
    -XX:MaxGCPauseMillis=200 \
    -XX:G1HeapRegionSize=1M \
    -XX:+UseStringDeduplication \
    -XX:+UseTLAB \
    -XX:+AlwaysPreTouch \
    -XX:+DisableExplicitGC \
    -XX:MaxMetaspaceSize=128m \
    -XX:CompressedClassSpaceSize=32m \
    -Xss256k \
    -XX:+HeapDumpOnOutOfMemoryError \
    -XX:HeapDumpPath=${LOG_DIR}/heap.dump"

case "\$1" in
    start)
        nohup java \$JAVA_OPTS -jar oci-start-release.jar > ${LOG_DIR}/console.log 2>&1 &
        echo "服务已启动"
        ;;
    stop)
        pid=\$(pgrep -f oci-start-release.jar)
        if [ -n "\$pid" ]; then
            kill \$pid
            echo "服务已停止"
        else
            echo "服务未运行"
        fi
        ;;
    restart)
        \$0 stop
        sleep 5
        \$0 start
        ;;
    *)
        echo "用法: \$0 {start|stop|restart}"
        exit 1
        ;;
esac
EOF

    chmod +x /root/oci-start/oci-start.sh
    log_message "Java启动脚本优化完成"
}

# 创建系统服务
create_system_service() {
    cat > /etc/systemd/system/oci-start.service << EOF
[Unit]
Description=OCI Start Service
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/root/oci-start
ExecStart=/root/oci-start/oci-start.sh start
ExecStop=/root/oci-start/oci-start.sh stop
Restart=always
RestartSec=10
LimitNOFILE=65535
LimitMEMORY=1G

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable oci-start
    log_message "系统服务配置完成"
}

# 主循环
main() {
    log_message "系统资源监控启动"
    
    # 首次运行时进行系统优化
    optimize_system
    optimize_java_startup
    create_system_service

    # 监控循环
    while true; do
        check_and_handle_resources
        sleep 30
    done
}

# 启动监控
main 
